generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================================
// ENUMS: For data integrity and type safety
// ================================================

enum UserRole {
  ADMIN
  HEALTH_PROVIDER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION // User has signed up, needs to verify their email
  PENDING_APPROVAL // User is verified, but needs admin approval (e.g., for provider role)
}

enum ProviderType {
  HOSPITAL
  HEALTH_CENTER
  DENTAL_CLINIC
  VETERINARY
  DERMATOLOGY
  GOVERNMENT_SERVICE_PROVIDER
}

enum ProviderStatus {
  PENDING // Awaiting initial admin review
  APPROVED
  REJECTED
  SUSPENDED // Temporarily disabled by an admin
  INACTIVE // Deactivated by the provider themselves
}

enum DocumentType {
  // User-specific documents
  DRIVERS_LICENSE
  PASSPORT
  NATIONAL_ID

  // Provider-specific documents
  BUSINESS_PERMIT
  TAX_REGISTRATION
  PROFESSIONAL_LICENSE // Could apply to a user or a provider entity
  SANITARY_PERMIT
  OTHER_BUSINESS_LICENSE
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified Boolean    @default(false)
  name          String
  image         String? // URL for profile picture
  phone         String? // Personal phone number
  status        UserStatus @default(PENDING_VERIFICATION)
  role          UserRole   @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  sessions       Session[]
  accounts       Account[]
  documents      Document[] // Personal documents like IDs
  healthProvider HealthProvider? // A user can be ONE health provider
  bookings       Booking[]
  reviews        Review[]
  favorites      UserFavorite[]
  notifications  Notification[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  providerId            String
  accountId             String
  password              String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  scope                 String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  userId                String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, providerId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

// ================================================
// HEALTH PROVIDER & RELATED MODELS
// ================================================

model HealthProvider {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  providerType  ProviderType
  status        ProviderStatus @default(PENDING)
  businessName  String
  description   String?        @db.Text
  businessPhone String
  businessEmail String         @unique // Business email should be unique
  address       String
  city          String
  province      String
  zipCode       String?
  latitude      Float?
  longitude     Float?
  images        String[] // Gallery of images for the provider's profile

  // System-managed fields
  averageRating   Float     @default(0)
  totalReviews    Int       @default(0)
  approvedBy      String? // Admin's user ID
  approvedAt      DateTime?
  rejectionReason String?
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  documents         Document[] // Business documents like permits
  services          Service[]
  staff             Staff[]
  bookings          Booking[]
  reviews           Review[]
  favorites         UserFavorite[]
  operatingSchedule OperatingSchedule[]

  @@map("health_providers")
}

// Unified model for all documents needing verification
model Document {
  id String @id @default(cuid())

  // A document can belong to a User (personal ID) OR a Provider (business permit)
  userId     String?
  user       User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId String?
  provider   HealthProvider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

  type       DocumentType
  identifier String? // The permit/license number
  imageUrl   String // The URL of the scanned document
  status     VerificationStatus @default(PENDING)

  issueDate  DateTime?
  expiryDate DateTime?

  // Admin-related fields for verification workflow
  verifiedAt      DateTime?
  verifiedBy      String? // Admin's user ID
  rejectionReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

model Service {
  id         String         @id @default(cuid())
  providerId String
  provider   HealthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  name        String
  description String? @db.Text
  priceRange  String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

model Staff {
  id         String         @id @default(cuid())
  providerId String
  provider   HealthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  name        String
  position    String
  specialties String[] // e.g., ["Cardiology", "Pediatrics"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}

model OperatingSchedule {
  id         String         @id @default(cuid())
  providerId String
  provider   HealthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  dayOfWeek Int // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  openTime  String // e.g., "09:00"
  closeTime String // e.g., "17:00"
  isOpen    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerId, dayOfWeek])
  @@map("operating_schedules")
}

// ================================================
// USER INTERACTION MODELS
// ================================================

model Booking {
  id               String @id @default(cuid())
  bookingReference String @unique @default(cuid())

  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId String
  provider   HealthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  serviceId  String?
  service    Service?       @relation(fields: [serviceId], references: [id])

  bookingDate DateTime
  status      BookingStatus @default(PENDING)
  notes       String?       @db.Text

  cancellationReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications Notification[]

  @@map("bookings")
}

model Review {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId String
  provider   HealthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  rating  Float
  comment String? @db.Text

  // Admin fields
  isVerified Boolean @default(false)
  isVisible  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, providerId])
  @@map("reviews")
}

model UserFavorite {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId String
  provider   HealthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())

  @@unique([userId, providerId])
  @@map("user_favorites")
}

model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String
  content   String  @db.Text
  isRead    Boolean @default(false)
  actionUrl String?

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())

  @@map("notifications")
}

// ================================================
// SYSTEM-LEVEL MODELS
// ================================================

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String? // The user who performed the action (can be null for system actions)
  action    String // e.g., "CREATE_PROVIDER", "UPDATE_BOOKING_STATUS"
  table     String
  recordId  String
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}


